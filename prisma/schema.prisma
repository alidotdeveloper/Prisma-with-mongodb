datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// model post {
//   id             String  @id @default(auto()) @map("_id") @db.ObjectId
//   title          String
//   body           String
//   Author         Author? @relation("WrittenPosts", fields: [authorId], references: [id])
//   authorId       String? @db.ObjectId
//   favouritedBy   Author? @relation("FavouritePosts", fields: [favouritedById], references: [id])
//   favouritedById String? @db.ObjectId

//   category   category? @relation(fields: [categoryId], references: [id])
//   // multiple relation
//   categoryId String?   @db.ObjectId
// }

// model userPreference {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   Email Boolean @unique

//   Author Author[]
// }

// model Author {
//   id               String          @id @default(auto()) @map("_id") @db.ObjectId
//   name             String
//   age              String
//   isAdmin          Boolean
//   WrittenPosts     post[]          @relation("WrittenPosts")
//   FavouritePosts   post[]          @relation("FavouritePosts")
//   UserPreference   userPreference? @relation(fields: [userPreferenceId], references: [id])
//   userPreferenceId String?         @db.ObjectId

//   @@unique([name, age])
// }

// // multiple relation
// model category {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   name  String
//   posts post[]
// }

//one to one

// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   profile Profile?

// }

// model Profile {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above)
// }

// one -to one 
// in this case of each single user must have one profile or no profile based on email
// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String   @unique
//   profile Profile?
// }

// model Profile {
//   id        String @id @default(auto()) @map("_id") @db.ObjectId
//   user      User   @relation(fields: [userEmail], references: [email])
//   userEmail String @unique // relation scalar field (used in the `@relation` attribute above)
// }

// 1-many 

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String // <-- add unique attribute
  posts Post[]
}

model Post {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  body     String
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
}
